//GNU GENERAL PUBLIC LICENSE Version 3

@namespace DcimIngester.Rules
@classname Parser

program<ProgramNode>
 = #{ state["Indentation"] = 0; } b:block {new ProgramNode(b)} 

block<BlockNode>
  = INDENTATION head:rule EOL _? EOL tail:block { new BlockNode(head).Concat(tail)}
  / INDENTATION line:rule { new BlockNode(line) }

rule<RuleNode> 
  = (c:condition _ '"' p:path '"' EOL INDENTATION r:rule) {new RuleNode(c,p,r,new EmptyNode())}
  / (c:condition _ '"' p:path '"' EOL INDENT b:block UNDENT) {new RuleNode(c,p,new EmptyNode(),b)} 
  / (c:condition _ '"' p:path '"') {new RuleNode(c,p,new EmptyNode(),new EmptyNode())}

  / (c:condition EOL INDENTATION r:rule) {new RuleNode(c,new PathNode(new StringNode("")),r,new EmptyNode())}
  / (c:condition EOL INDENT b:block UNDENT) {new RuleNode(c,new PathNode(new StringNode("")),new EmptyNode(),b)}
  / (c:condition) {new RuleNode(c,new PathNode(new StringNode("")),new EmptyNode(),new EmptyNode())}

condition<SyntaxNode> 
  = (l:conditionType _? '=' _? r:conditionType) {new EqualsNode(l,r)}
  / (l:conditionType _? '!='_? r:conditionType) {new NotNode(l,r)}
  / (l:conditionType _? '>' _? r:conditionType) {new GreaterThanNode(l,r)}
  / (l:conditionType _? '<' _? r:conditionType) {new LessThanNode(l,r)}
  / (l:conditionType _? '<='_? r:conditionType) {new GreaterOrEqualNode(l,r)}
  / (l:conditionType _? '>='_? r:conditionType) {new LessOrEqualNode(l,r)}
  / 'any' {new AnyNode()}
  / (l:conditionType _ 'contains' _ r:conditionType) {new ContainsNode(l,r)}

stringInterpolation<SyntaxNode> = "{" c:conditionType "}" {c} 

path<PathNode>
  = head:pathComponent tail:path {new PathNode(head).Concat(tail)}
  / part:pathComponent {new PathNode(part)}

pathComponent<SyntaxNode> 
  = pathString
  / stringInterpolation

pathString<StringNode> = s:("" [^\\:*?"<>|}{]+) {new StringNode(s)}

conditionType<SyntaxNode>
    = "extension" {new ExtensionNode()}
    / "year"  {new YearNode()}
    / "month"  {new MonthNode()}
    / "day"  {new DayNode()}
    / "hour"  {new HourNode()}
    / "minute"  {new MinuteNode()}
    / "second"  {new SecondNode()}
    / "file name" {new FileNameNode()}
    / "path[" p:("" [0-9\-]+) "]" {new PathPartNode(int.Parse(p))}
    / "path" {new PathNameNode()}
    / d:(""[^";]+) ";"  t:(""[^;"}]+) ";" {new MetadataNode(d,t)}
    / '"' s:("" [^\\/:*?"<>|.]+) '"' {new StringNode(s)} 

_ = [\t ]+
EOL = '\n' / '\r\n'

INDENTATION
  = spaces:" "* &{ spaces.Count == state["Indentation"] }

INDENT
  = #{ state["Indentation"] += 4; }

UNDENT
  = #{ state["Indentation"] -= 4; }